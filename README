Ini adalah code dari tutorial yg berjudul:....

Tutorial Detail
----------------
- **Topics:** Django
- **Difficulty:** ++/+++++
- **Estimated Completion Time:** .. hour(s)

Di tutorial pertama ini kita akan membuat sebuah aplikasi musik *streaming* sederhana. Fiturnya adalah:

- CRUD dengan memanfaatkan fitur django-admin,
- Tampilan front-end yang simpel dengan html & css,
- *Local storage* dulu lah ya, *cloud* nanti di tutorial berikutnya ;)

Kebutuhan
------------
- Python, pastinya :) Untuk memastikan, ketik:
<pre class="prettyprint">
    python
</pre>
di terminal.

[screenshot]

- Django. Silakan ketik:
<pre class="prettyprint">
    >> import django
    >> django.VERSION
</pre>

[screenshot]

Kalo django belum terinstall, silakan [install dulu](https://docs.djangoproject.com/en/1.3/intro/install/).

Versi tidak terlalu penting. Python minimal 2.5 dan django minimal 1.2 saja.

- Dan sedikit dasar python ataupun django sudah mencukupi.


Let's Get Started!
===========
Project Baru
--------------
Oke, untuk tahap pertama kita buat project baru dengan menggunakan script bawaan django, yaitu django-admin.py. Project ini kita namakan django_jeff. Jeff itu diambil dari nama gitaris favorit saya, [Jeff Beck](http://www.jeffbeck.com).
<pre class="prettyprint">
    django-admin.py startproject django_jeff
</pre>

itu kalo di linux, kalo di windows, django-admin.py adanya di folder python kamu, contohnya: C:/python27/scripts/ dan mungkin harus menggunakan perintah python sebelum django-admin.py
<pre class="prettyprint">
    C:/python27/scripts/> python django-admin.py startproject django_jeff
</pre>

[screenshot ls django_jeff]

Nah, sekarang coba deh jalanin perintah dibawah ini untuk test project kita bisa jalan apa ngga:
<pre class="prettyprint">
    python manage.py runserver
</pre>
[screenshot runserver]
Coba deh buka browser, terus menuju ke alamat: http://localhost:8000, dan WOW! Ini artinya project kita sudah dimulai!
[screenshot browser welcome to django]

Pasti banyak pertanyaan nih, kenapa port nya yg dipake 8000? Simpelnya, supaya ngga *conflict* dgn apache (kalo keinstall). Mau ganti port, atau ip address? [Silakan baca ini](https://docs.djangoproject.com/en/1.3/ref/django-admin/#runserver-port-or-address-port). Django mempersenjatai dirinya sendiri dengan simpel webserver sehingga kita tidak direpotkan dengan urusan tetek-bengek instalasi webserver. Karena salah satu filosofi django adalah [quick development](https://docs.djangoproject.com/en/dev/misc/design-philosophies/?from=olddocs#quick-development). Nantinya kalo aplikasi kita harus di-deploy, baru deh kita pikirin webserver :) jadi sekarang ngga usah mikirin webserver, ada yg lebih penting: mari mikirin langkah berikutnya biar project kita ada progress nya :)

Setting The Project
---------------------
edit settings.py, ubah settingan *database*-nya. Terserah mau pake database apa, mysql, postgres, sqlite dll. Untuk mempermudah, kita pake sqlite aja ya, karena kalo pake database lain, selain harus install servernya, juga kita harus install driver nya di python. Sedangkan sqlite ngga perlu, python versi 2.7 udah include driver sqlite jadi tinggal pake.

<pre class="prettyprint">
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  
        'NAME': 'audiostream.db',                      
        'USER': '',                      
        'PASSWORD': '',                  
        'HOST': '',                      
        'PORT': '',                      
    }
}
</pre>

Simpel kan sqlite?! :D Cukup isi engine dan nama database aja, yg lain gak pake. Dan jangan lupa, nama database bisa diisi terserah kamu ya ;)

[project_dir]

Buat Aplikasi Baru
--------------------
Langkah berikutnya adalah membuat aplikasi didalam project yang tadi kita buat. Caranya:
<pre class="prettyprint">
    cd django_jeff
    python manage.py startapp audiostream
</pre>
kita namakan saja audiostream. [screenshot ls -l audiostream]



- edit settings.py, install admin & audio app
- building back-end app
- building front-end app
- styling the app
- done!